
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000376c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b0  080038b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038b0  080038b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038b0  080038b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  2000000c  080038c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  080038c4  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc66  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002058  00000000  00000000  0002bc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0002dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173f2  00000000  00000000  0002f5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d71b  00000000  00000000  00046992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000889ee  00000000  00000000  000540ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dca9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  000dcaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003860 	.word	0x08003860

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003860 	.word	0x08003860

0800014c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015c:	2b00      	cmp	r3, #0
 800015e:	db0a      	blt.n	8000176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000160:	683b      	ldr	r3, [r7, #0]
 8000162:	b2da      	uxtb	r2, r3
 8000164:	490c      	ldr	r1, [pc, #48]	; (8000198 <__NVIC_SetPriority+0x4c>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	0112      	lsls	r2, r2, #4
 800016c:	b2d2      	uxtb	r2, r2
 800016e:	440b      	add	r3, r1
 8000170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000174:	e00a      	b.n	800018c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4908      	ldr	r1, [pc, #32]	; (800019c <__NVIC_SetPriority+0x50>)
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	f003 030f 	and.w	r3, r3, #15
 8000182:	3b04      	subs	r3, #4
 8000184:	0112      	lsls	r2, r2, #4
 8000186:	b2d2      	uxtb	r2, r2
 8000188:	440b      	add	r3, r1
 800018a:	761a      	strb	r2, [r3, #24]
}
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	e000e100 	.word	0xe000e100
 800019c:	e000ed00 	.word	0xe000ed00

080001a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3b01      	subs	r3, #1
 80001ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001b0:	d301      	bcc.n	80001b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00f      	b.n	80001d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001b6:	4a0a      	ldr	r2, [pc, #40]	; (80001e0 <SysTick_Config+0x40>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3b01      	subs	r3, #1
 80001bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001be:	210f      	movs	r1, #15
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001c4:	f7ff ffc2 	bl	800014c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <SysTick_Config+0x40>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <SysTick_Config+0x40>)
 80001d0:	2207      	movs	r2, #7
 80001d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80001d4:	2300      	movs	r3, #0
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	e000e010 	.word	0xe000e010

080001e4 <Halt_us>:
TCB *current_thread_pt;
TCB tcb[MAX_THREADS] = {0};


void Halt_us(uint32_t time)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < time; ++i) {
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	e042      	b.n	8000278 <Halt_us+0x94>
		NOP_US;
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	bf00      	nop
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	bf00      	nop
 800020a:	bf00      	nop
 800020c:	bf00      	nop
 800020e:	bf00      	nop
 8000210:	bf00      	nop
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	bf00      	nop
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	bf00      	nop
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	bf00      	nop
 8000226:	bf00      	nop
 8000228:	bf00      	nop
 800022a:	bf00      	nop
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	bf00      	nop
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	bf00      	nop
 8000240:	bf00      	nop
 8000242:	bf00      	nop
 8000244:	bf00      	nop
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	bf00      	nop
 800024e:	bf00      	nop
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	bf00      	nop
	for (uint32_t i = 0; i < time; ++i) {
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	3301      	adds	r3, #1
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	429a      	cmp	r2, r3
 800027e:	d3b8      	bcc.n	80001f2 <Halt_us+0xe>
	}

}
 8000280:	bf00      	nop
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <Halt_ms>:

void Halt_ms(uint32_t time)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < time; ++i) {
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e3f4      	b.n	8000a84 <Halt_ms+0x7f8>
		for (uint32_t ii = 0; ii < 64; ++ii) {
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	e3ea      	b.n	8000a76 <Halt_ms+0x7ea>
			NOP_MS;
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	bf00      	nop
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	bf00      	nop
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	bf00      	nop
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	bf00      	nop
 8000350:	bf00      	nop
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	bf00      	nop
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
 80003ae:	bf00      	nop
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	bf00      	nop
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	bf00      	nop
 80003d8:	bf00      	nop
 80003da:	bf00      	nop
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	bf00      	nop
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
 80003fa:	bf00      	nop
 80003fc:	bf00      	nop
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	bf00      	nop
 800040c:	bf00      	nop
 800040e:	bf00      	nop
 8000410:	bf00      	nop
 8000412:	bf00      	nop
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	bf00      	nop
 8000428:	bf00      	nop
 800042a:	bf00      	nop
 800042c:	bf00      	nop
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	bf00      	nop
 8000440:	bf00      	nop
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	bf00      	nop
 8000448:	bf00      	nop
 800044a:	bf00      	nop
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	bf00      	nop
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	bf00      	nop
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	bf00      	nop
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	bf00      	nop
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	bf00      	nop
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	bf00      	nop
 80009a6:	bf00      	nop
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	bf00      	nop
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
		for (uint32_t ii = 0; ii < 64; ++ii) {
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	3301      	adds	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	2b3f      	cmp	r3, #63	; 0x3f
 8000a7a:	f67f ac11 	bls.w	80002a0 <Halt_ms+0x14>
	for(uint32_t i = 0; i < time; ++i) {
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	f4ff ac06 	bcc.w	800029a <Halt_ms+0xe>
		}
	}
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
	...

08000a9c <Create_Thread>:


void Create_Thread(void (*thread_handler)(void))
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if(thread_ctr < MAX_THREADS)
 8000aa4:	4bb7      	ldr	r3, [pc, #732]	; (8000d84 <Create_Thread+0x2e8>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b04      	cmp	r3, #4
 8000aaa:	f200 81d0 	bhi.w	8000e4e <Create_Thread+0x3b2>
	{

		tcb[thread_ctr].stack_pointer = &tcb[thread_ctr].stack[STACK_SIZE];
 8000aae:	4bb5      	ldr	r3, [pc, #724]	; (8000d84 <Create_Thread+0x2e8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4bb3      	ldr	r3, [pc, #716]	; (8000d84 <Create_Thread+0x2e8>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	1c53      	adds	r3, r2, #1
 8000abc:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000ac0:	fb02 f303 	mul.w	r3, r2, r3
 8000ac4:	4ab0      	ldr	r2, [pc, #704]	; (8000d88 <Create_Thread+0x2ec>)
 8000ac6:	441a      	add	r2, r3
 8000ac8:	49af      	ldr	r1, [pc, #700]	; (8000d88 <Create_Thread+0x2ec>)
 8000aca:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8000ace:	fb00 f303 	mul.w	r3, r0, r3
 8000ad2:	440b      	add	r3, r1
 8000ad4:	601a      	str	r2, [r3, #0]

		--tcb[thread_ctr].stack_pointer; *(tcb[thread_ctr].stack_pointer) |= 1<<24;						/*xPSR*/
 8000ad6:	4bab      	ldr	r3, [pc, #684]	; (8000d84 <Create_Thread+0x2e8>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	49ab      	ldr	r1, [pc, #684]	; (8000d88 <Create_Thread+0x2ec>)
 8000adc:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000ae0:	fb03 f202 	mul.w	r2, r3, r2
 8000ae4:	440a      	add	r2, r1
 8000ae6:	6812      	ldr	r2, [r2, #0]
 8000ae8:	3a04      	subs	r2, #4
 8000aea:	49a7      	ldr	r1, [pc, #668]	; (8000d88 <Create_Thread+0x2ec>)
 8000aec:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8000af0:	fb00 f303 	mul.w	r3, r0, r3
 8000af4:	440b      	add	r3, r1
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	4ba2      	ldr	r3, [pc, #648]	; (8000d84 <Create_Thread+0x2e8>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	4aa2      	ldr	r2, [pc, #648]	; (8000d88 <Create_Thread+0x2ec>)
 8000b00:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8000b04:	fb01 f303 	mul.w	r3, r1, r3
 8000b08:	4413      	add	r3, r2
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b9d      	ldr	r3, [pc, #628]	; (8000d84 <Create_Thread+0x2e8>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	499c      	ldr	r1, [pc, #624]	; (8000d88 <Create_Thread+0x2ec>)
 8000b16:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8000b1a:	fb00 f303 	mul.w	r3, r0, r3
 8000b1e:	440b      	add	r3, r1
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000b26:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = (uint32_t) thread_handler;									/*PC*/
 8000b28:	4b96      	ldr	r3, [pc, #600]	; (8000d84 <Create_Thread+0x2e8>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4996      	ldr	r1, [pc, #600]	; (8000d88 <Create_Thread+0x2ec>)
 8000b2e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000b32:	fb03 f202 	mul.w	r2, r3, r2
 8000b36:	440a      	add	r2, r1
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	1f11      	subs	r1, r2, #4
 8000b3c:	4892      	ldr	r0, [pc, #584]	; (8000d88 <Create_Thread+0x2ec>)
 8000b3e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000b42:	fb03 f202 	mul.w	r2, r3, r2
 8000b46:	4402      	add	r2, r0
 8000b48:	6011      	str	r1, [r2, #0]
 8000b4a:	4a8f      	ldr	r2, [pc, #572]	; (8000d88 <Create_Thread+0x2ec>)
 8000b4c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000b50:	fb01 f303 	mul.w	r3, r1, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF; 												/* LR*/
 8000b5c:	4b89      	ldr	r3, [pc, #548]	; (8000d84 <Create_Thread+0x2e8>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4989      	ldr	r1, [pc, #548]	; (8000d88 <Create_Thread+0x2ec>)
 8000b62:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000b66:	fb03 f202 	mul.w	r2, r3, r2
 8000b6a:	440a      	add	r2, r1
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	1f11      	subs	r1, r2, #4
 8000b70:	4885      	ldr	r0, [pc, #532]	; (8000d88 <Create_Thread+0x2ec>)
 8000b72:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000b76:	fb03 f202 	mul.w	r2, r3, r2
 8000b7a:	4402      	add	r2, r0
 8000b7c:	6011      	str	r1, [r2, #0]
 8000b7e:	4a82      	ldr	r2, [pc, #520]	; (8000d88 <Create_Thread+0x2ec>)
 8000b80:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000b84:	fb01 f303 	mul.w	r3, r1, r3
 8000b88:	4413      	add	r3, r2
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a7f      	ldr	r2, [pc, #508]	; (8000d8c <Create_Thread+0x2f0>)
 8000b8e:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R12*/
 8000b90:	4b7c      	ldr	r3, [pc, #496]	; (8000d84 <Create_Thread+0x2e8>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	497c      	ldr	r1, [pc, #496]	; (8000d88 <Create_Thread+0x2ec>)
 8000b96:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000b9a:	fb03 f202 	mul.w	r2, r3, r2
 8000b9e:	440a      	add	r2, r1
 8000ba0:	6812      	ldr	r2, [r2, #0]
 8000ba2:	1f11      	subs	r1, r2, #4
 8000ba4:	4878      	ldr	r0, [pc, #480]	; (8000d88 <Create_Thread+0x2ec>)
 8000ba6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000baa:	fb03 f202 	mul.w	r2, r3, r2
 8000bae:	4402      	add	r2, r0
 8000bb0:	6011      	str	r1, [r2, #0]
 8000bb2:	4a75      	ldr	r2, [pc, #468]	; (8000d88 <Create_Thread+0x2ec>)
 8000bb4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000bb8:	fb01 f303 	mul.w	r3, r1, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a72      	ldr	r2, [pc, #456]	; (8000d8c <Create_Thread+0x2f0>)
 8000bc2:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R3*/
 8000bc4:	4b6f      	ldr	r3, [pc, #444]	; (8000d84 <Create_Thread+0x2e8>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	496f      	ldr	r1, [pc, #444]	; (8000d88 <Create_Thread+0x2ec>)
 8000bca:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000bce:	fb03 f202 	mul.w	r2, r3, r2
 8000bd2:	440a      	add	r2, r1
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	1f11      	subs	r1, r2, #4
 8000bd8:	486b      	ldr	r0, [pc, #428]	; (8000d88 <Create_Thread+0x2ec>)
 8000bda:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000bde:	fb03 f202 	mul.w	r2, r3, r2
 8000be2:	4402      	add	r2, r0
 8000be4:	6011      	str	r1, [r2, #0]
 8000be6:	4a68      	ldr	r2, [pc, #416]	; (8000d88 <Create_Thread+0x2ec>)
 8000be8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000bec:	fb01 f303 	mul.w	r3, r1, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a65      	ldr	r2, [pc, #404]	; (8000d8c <Create_Thread+0x2f0>)
 8000bf6:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R2*/
 8000bf8:	4b62      	ldr	r3, [pc, #392]	; (8000d84 <Create_Thread+0x2e8>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4962      	ldr	r1, [pc, #392]	; (8000d88 <Create_Thread+0x2ec>)
 8000bfe:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000c02:	fb03 f202 	mul.w	r2, r3, r2
 8000c06:	440a      	add	r2, r1
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	1f11      	subs	r1, r2, #4
 8000c0c:	485e      	ldr	r0, [pc, #376]	; (8000d88 <Create_Thread+0x2ec>)
 8000c0e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000c12:	fb03 f202 	mul.w	r2, r3, r2
 8000c16:	4402      	add	r2, r0
 8000c18:	6011      	str	r1, [r2, #0]
 8000c1a:	4a5b      	ldr	r2, [pc, #364]	; (8000d88 <Create_Thread+0x2ec>)
 8000c1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000c20:	fb01 f303 	mul.w	r3, r1, r3
 8000c24:	4413      	add	r3, r2
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a58      	ldr	r2, [pc, #352]	; (8000d8c <Create_Thread+0x2f0>)
 8000c2a:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R1*/
 8000c2c:	4b55      	ldr	r3, [pc, #340]	; (8000d84 <Create_Thread+0x2e8>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4955      	ldr	r1, [pc, #340]	; (8000d88 <Create_Thread+0x2ec>)
 8000c32:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000c36:	fb03 f202 	mul.w	r2, r3, r2
 8000c3a:	440a      	add	r2, r1
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	1f11      	subs	r1, r2, #4
 8000c40:	4851      	ldr	r0, [pc, #324]	; (8000d88 <Create_Thread+0x2ec>)
 8000c42:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000c46:	fb03 f202 	mul.w	r2, r3, r2
 8000c4a:	4402      	add	r2, r0
 8000c4c:	6011      	str	r1, [r2, #0]
 8000c4e:	4a4e      	ldr	r2, [pc, #312]	; (8000d88 <Create_Thread+0x2ec>)
 8000c50:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000c54:	fb01 f303 	mul.w	r3, r1, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a4b      	ldr	r2, [pc, #300]	; (8000d8c <Create_Thread+0x2f0>)
 8000c5e:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;   												/*R0*/
 8000c60:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <Create_Thread+0x2e8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4948      	ldr	r1, [pc, #288]	; (8000d88 <Create_Thread+0x2ec>)
 8000c66:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000c6a:	fb03 f202 	mul.w	r2, r3, r2
 8000c6e:	440a      	add	r2, r1
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	1f11      	subs	r1, r2, #4
 8000c74:	4844      	ldr	r0, [pc, #272]	; (8000d88 <Create_Thread+0x2ec>)
 8000c76:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000c7a:	fb03 f202 	mul.w	r2, r3, r2
 8000c7e:	4402      	add	r2, r0
 8000c80:	6011      	str	r1, [r2, #0]
 8000c82:	4a41      	ldr	r2, [pc, #260]	; (8000d88 <Create_Thread+0x2ec>)
 8000c84:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000c88:	fb01 f303 	mul.w	r3, r1, r3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a3e      	ldr	r2, [pc, #248]	; (8000d8c <Create_Thread+0x2f0>)
 8000c92:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R11*/
 8000c94:	4b3b      	ldr	r3, [pc, #236]	; (8000d84 <Create_Thread+0x2e8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	493b      	ldr	r1, [pc, #236]	; (8000d88 <Create_Thread+0x2ec>)
 8000c9a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000c9e:	fb03 f202 	mul.w	r2, r3, r2
 8000ca2:	440a      	add	r2, r1
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	1f11      	subs	r1, r2, #4
 8000ca8:	4837      	ldr	r0, [pc, #220]	; (8000d88 <Create_Thread+0x2ec>)
 8000caa:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000cae:	fb03 f202 	mul.w	r2, r3, r2
 8000cb2:	4402      	add	r2, r0
 8000cb4:	6011      	str	r1, [r2, #0]
 8000cb6:	4a34      	ldr	r2, [pc, #208]	; (8000d88 <Create_Thread+0x2ec>)
 8000cb8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000cbc:	fb01 f303 	mul.w	r3, r1, r3
 8000cc0:	4413      	add	r3, r2
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a31      	ldr	r2, [pc, #196]	; (8000d8c <Create_Thread+0x2f0>)
 8000cc6:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R10*/
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <Create_Thread+0x2e8>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	492e      	ldr	r1, [pc, #184]	; (8000d88 <Create_Thread+0x2ec>)
 8000cce:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000cd2:	fb03 f202 	mul.w	r2, r3, r2
 8000cd6:	440a      	add	r2, r1
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	1f11      	subs	r1, r2, #4
 8000cdc:	482a      	ldr	r0, [pc, #168]	; (8000d88 <Create_Thread+0x2ec>)
 8000cde:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000ce2:	fb03 f202 	mul.w	r2, r3, r2
 8000ce6:	4402      	add	r2, r0
 8000ce8:	6011      	str	r1, [r2, #0]
 8000cea:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <Create_Thread+0x2ec>)
 8000cec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000cf0:	fb01 f303 	mul.w	r3, r1, r3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a24      	ldr	r2, [pc, #144]	; (8000d8c <Create_Thread+0x2f0>)
 8000cfa:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R9*/
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <Create_Thread+0x2e8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4921      	ldr	r1, [pc, #132]	; (8000d88 <Create_Thread+0x2ec>)
 8000d02:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000d06:	fb03 f202 	mul.w	r2, r3, r2
 8000d0a:	440a      	add	r2, r1
 8000d0c:	6812      	ldr	r2, [r2, #0]
 8000d0e:	1f11      	subs	r1, r2, #4
 8000d10:	481d      	ldr	r0, [pc, #116]	; (8000d88 <Create_Thread+0x2ec>)
 8000d12:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000d16:	fb03 f202 	mul.w	r2, r3, r2
 8000d1a:	4402      	add	r2, r0
 8000d1c:	6011      	str	r1, [r2, #0]
 8000d1e:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <Create_Thread+0x2ec>)
 8000d20:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000d24:	fb01 f303 	mul.w	r3, r1, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <Create_Thread+0x2f0>)
 8000d2e:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R8*/
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <Create_Thread+0x2e8>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4914      	ldr	r1, [pc, #80]	; (8000d88 <Create_Thread+0x2ec>)
 8000d36:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000d3a:	fb03 f202 	mul.w	r2, r3, r2
 8000d3e:	440a      	add	r2, r1
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	1f11      	subs	r1, r2, #4
 8000d44:	4810      	ldr	r0, [pc, #64]	; (8000d88 <Create_Thread+0x2ec>)
 8000d46:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000d4a:	fb03 f202 	mul.w	r2, r3, r2
 8000d4e:	4402      	add	r2, r0
 8000d50:	6011      	str	r1, [r2, #0]
 8000d52:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <Create_Thread+0x2ec>)
 8000d54:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000d58:	fb01 f303 	mul.w	r3, r1, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <Create_Thread+0x2f0>)
 8000d62:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;   												/*R7*/
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <Create_Thread+0x2e8>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <Create_Thread+0x2ec>)
 8000d6a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000d6e:	fb03 f202 	mul.w	r2, r3, r2
 8000d72:	440a      	add	r2, r1
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	1f11      	subs	r1, r2, #4
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <Create_Thread+0x2ec>)
 8000d7a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000d7e:	fb03 f202 	mul.w	r2, r3, r2
 8000d82:	e005      	b.n	8000d90 <Create_Thread+0x2f4>
 8000d84:	20000028 	.word	0x20000028
 8000d88:	20000030 	.word	0x20000030
 8000d8c:	deadbeef 	.word	0xdeadbeef
 8000d90:	4402      	add	r2, r0
 8000d92:	6011      	str	r1, [r2, #0]
 8000d94:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <Create_Thread+0x3bc>)
 8000d96:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000d9a:	fb01 f303 	mul.w	r3, r1, r3
 8000d9e:	4413      	add	r3, r2
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <Create_Thread+0x3c0>)
 8000da4:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R6*/
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <Create_Thread+0x3c4>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	492b      	ldr	r1, [pc, #172]	; (8000e58 <Create_Thread+0x3bc>)
 8000dac:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000db0:	fb03 f202 	mul.w	r2, r3, r2
 8000db4:	440a      	add	r2, r1
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	1f11      	subs	r1, r2, #4
 8000dba:	4827      	ldr	r0, [pc, #156]	; (8000e58 <Create_Thread+0x3bc>)
 8000dbc:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000dc0:	fb03 f202 	mul.w	r2, r3, r2
 8000dc4:	4402      	add	r2, r0
 8000dc6:	6011      	str	r1, [r2, #0]
 8000dc8:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <Create_Thread+0x3bc>)
 8000dca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000dce:	fb01 f303 	mul.w	r3, r1, r3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <Create_Thread+0x3c0>)
 8000dd8:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R5*/
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <Create_Thread+0x3c4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	491e      	ldr	r1, [pc, #120]	; (8000e58 <Create_Thread+0x3bc>)
 8000de0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000de4:	fb03 f202 	mul.w	r2, r3, r2
 8000de8:	440a      	add	r2, r1
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	1f11      	subs	r1, r2, #4
 8000dee:	481a      	ldr	r0, [pc, #104]	; (8000e58 <Create_Thread+0x3bc>)
 8000df0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000df4:	fb03 f202 	mul.w	r2, r3, r2
 8000df8:	4402      	add	r2, r0
 8000dfa:	6011      	str	r1, [r2, #0]
 8000dfc:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <Create_Thread+0x3bc>)
 8000dfe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000e02:	fb01 f303 	mul.w	r3, r1, r3
 8000e06:	4413      	add	r3, r2
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <Create_Thread+0x3c0>)
 8000e0c:	601a      	str	r2, [r3, #0]
		*(--tcb[thread_ctr].stack_pointer) = 0xDEADBEEF;												/*R4*/
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <Create_Thread+0x3c4>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	4911      	ldr	r1, [pc, #68]	; (8000e58 <Create_Thread+0x3bc>)
 8000e14:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000e18:	fb03 f202 	mul.w	r2, r3, r2
 8000e1c:	440a      	add	r2, r1
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	1f11      	subs	r1, r2, #4
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <Create_Thread+0x3bc>)
 8000e24:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000e28:	fb03 f202 	mul.w	r2, r3, r2
 8000e2c:	4402      	add	r2, r0
 8000e2e:	6011      	str	r1, [r2, #0]
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <Create_Thread+0x3bc>)
 8000e32:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000e36:	fb01 f303 	mul.w	r3, r1, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <Create_Thread+0x3c0>)
 8000e40:	601a      	str	r2, [r3, #0]



		++thread_ctr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <Create_Thread+0x3c4>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <Create_Thread+0x3c4>)
 8000e4c:	701a      	strb	r2, [r3, #0]
	}

}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	20000030 	.word	0x20000030
 8000e5c:	deadbeef 	.word	0xdeadbeef
 8000e60:	20000028 	.word	0x20000028

08000e64 <os_init>:

void os_init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock/1000);
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <os_init+0x50>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <os_init+0x54>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	099b      	lsrs	r3, r3, #6
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff f993 	bl	80001a0 <SysTick_Config>

	/*Linking the elements of the list*/

	tcb[0].next = &tcb[1];
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <os_init+0x58>)
 8000e7c:	4a10      	ldr	r2, [pc, #64]	; (8000ec0 <os_init+0x5c>)
 8000e7e:	605a      	str	r2, [r3, #4]
	tcb[1].next = &tcb[2];
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <os_init+0x58>)
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <os_init+0x60>)
 8000e84:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	tcb[2].next = &tcb[0];
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <os_init+0x58>)
 8000e8a:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <os_init+0x58>)
 8000e8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

	/*Choosing the first thread*/

	current_thread_pt = &tcb[0];
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <os_init+0x64>)
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <os_init+0x58>)
 8000e94:	601a      	str	r2, [r3, #0]


	__asm("LDR	R0,=current_thread_pt");			//R0 = &current_thread_pt
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <os_init+0x68>)
	__asm("LDR	R1, [R0]");							//R1 = current_thread_pt
 8000e98:	6801      	ldr	r1, [r0, #0]
	__asm("LDR	SP, [R1]");							//SP = *current_thread_pt
 8000e9a:	f8d1 d000 	ldr.w	sp, [r1]
	__asm("pop	{r0-r12}");
 8000e9e:	e8bd 1fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
	__asm("add	sp,sp,#4");							//Skip LR register
 8000ea2:	b001      	add	sp, #4
	__asm("POP	{LR}");								//Load thread address into PC
 8000ea4:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm("add	sp,sp,#4");							//Sip xPSR register
 8000ea8:	b001      	add	sp, #4
	__asm("CPSIE	I");
 8000eaa:	b662      	cpsie	i
	__asm("bx 	lr");								//Return to 1st thread
 8000eac:	4770      	bx	lr

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	10624dd3 	.word	0x10624dd3
 8000ebc:	20000030 	.word	0x20000030
 8000ec0:	20000178 	.word	0x20000178
 8000ec4:	200002c0 	.word	0x200002c0
 8000ec8:	2000002c 	.word	0x2000002c
 8000ecc:	2000002c 	.word	0x2000002c

08000ed0 <lcd_init>:
#include "lcd_driver.h"


void lcd_init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	GPIOB->ODR &=	~(1<<RS);
 8000ed4:	4b35      	ldr	r3, [pc, #212]	; (8000fac <lcd_init+0xdc>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	4a34      	ldr	r2, [pc, #208]	; (8000fac <lcd_init+0xdc>)
 8000eda:	f023 0304 	bic.w	r3, r3, #4
 8000ede:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= 1<<DATA4 | 1<<DATA5;
 8000ee0:	4b32      	ldr	r3, [pc, #200]	; (8000fac <lcd_init+0xdc>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	4a31      	ldr	r2, [pc, #196]	; (8000fac <lcd_init+0xdc>)
 8000ee6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000eea:	60d3      	str	r3, [r2, #12]

	Halt_ms(20);
 8000eec:	2014      	movs	r0, #20
 8000eee:	f7ff f9cd 	bl	800028c <Halt_ms>
	ENABLE_DATA();
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <lcd_init+0xdc>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	; (8000fac <lcd_init+0xdc>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	60d3      	str	r3, [r2, #12]
 8000efe:	2032      	movs	r0, #50	; 0x32
 8000f00:	f7ff f970 	bl	80001e4 <Halt_us>
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <lcd_init+0xdc>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	4a28      	ldr	r2, [pc, #160]	; (8000fac <lcd_init+0xdc>)
 8000f0a:	f023 0302 	bic.w	r3, r3, #2
 8000f0e:	60d3      	str	r3, [r2, #12]

	Halt_ms(5);
 8000f10:	2005      	movs	r0, #5
 8000f12:	f7ff f9bb 	bl	800028c <Halt_ms>
	ENABLE_DATA();
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <lcd_init+0xdc>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	4a24      	ldr	r2, [pc, #144]	; (8000fac <lcd_init+0xdc>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	60d3      	str	r3, [r2, #12]
 8000f22:	2032      	movs	r0, #50	; 0x32
 8000f24:	f7ff f95e 	bl	80001e4 <Halt_us>
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <lcd_init+0xdc>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <lcd_init+0xdc>)
 8000f2e:	f023 0302 	bic.w	r3, r3, #2
 8000f32:	60d3      	str	r3, [r2, #12]

	Halt_ms(2);
 8000f34:	2002      	movs	r0, #2
 8000f36:	f7ff f9a9 	bl	800028c <Halt_ms>
	ENABLE_DATA();
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <lcd_init+0xdc>)
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <lcd_init+0xdc>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	60d3      	str	r3, [r2, #12]
 8000f46:	2032      	movs	r0, #50	; 0x32
 8000f48:	f7ff f94c 	bl	80001e4 <Halt_us>
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <lcd_init+0xdc>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	4a16      	ldr	r2, [pc, #88]	; (8000fac <lcd_init+0xdc>)
 8000f52:	f023 0302 	bic.w	r3, r3, #2
 8000f56:	60d3      	str	r3, [r2, #12]

	GPIOB->ODR &= ~(1<<DATA4);
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <lcd_init+0xdc>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <lcd_init+0xdc>)
 8000f5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f62:	60d3      	str	r3, [r2, #12]
	ENABLE_DATA();
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <lcd_init+0xdc>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a10      	ldr	r2, [pc, #64]	; (8000fac <lcd_init+0xdc>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	60d3      	str	r3, [r2, #12]
 8000f70:	2032      	movs	r0, #50	; 0x32
 8000f72:	f7ff f937 	bl	80001e4 <Halt_us>
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <lcd_init+0xdc>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <lcd_init+0xdc>)
 8000f7c:	f023 0302 	bic.w	r3, r3, #2
 8000f80:	60d3      	str	r3, [r2, #12]
	Halt_ms(5);
 8000f82:	2005      	movs	r0, #5
 8000f84:	f7ff f982 	bl	800028c <Halt_ms>

	send_command_to_lcd(0b00101000);	// N=1(2 rows), F=0 (5*8 matrix)
 8000f88:	2028      	movs	r0, #40	; 0x28
 8000f8a:	f000 f867 	bl	800105c <send_command_to_lcd>
	send_command_to_lcd(0b00001000);	// display off, cursor&blinking off
 8000f8e:	2008      	movs	r0, #8
 8000f90:	f000 f864 	bl	800105c <send_command_to_lcd>
	send_command_to_lcd(0b00000001);	// clear screen, return cursor home
 8000f94:	2001      	movs	r0, #1
 8000f96:	f000 f861 	bl	800105c <send_command_to_lcd>
	send_command_to_lcd(0b00000110);	// inc cursor right when writing, don't shift screen
 8000f9a:	2006      	movs	r0, #6
 8000f9c:	f000 f85e 	bl	800105c <send_command_to_lcd>
	send_command_to_lcd(0b00001100);	// display back on
 8000fa0:	200c      	movs	r0, #12
 8000fa2:	f000 f85b 	bl	800105c <send_command_to_lcd>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <lcd_write>:

void lcd_write(char *s)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	GPIOB->ODR |= 1<<RS;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <lcd_write+0xa8>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	4a26      	ldr	r2, [pc, #152]	; (8001058 <lcd_write+0xa8>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	60d3      	str	r3, [r2, #12]

	while(*s != 0){
 8000fc4:	e03f      	b.n	8001046 <lcd_write+0x96>
		GPIOB->ODR &= 0x0FFF;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <lcd_write+0xa8>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	4a23      	ldr	r2, [pc, #140]	; (8001058 <lcd_write+0xa8>)
 8000fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd0:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= ((*s & 0xF0)<<8);
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <lcd_write+0xa8>)
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000fe0:	491d      	ldr	r1, [pc, #116]	; (8001058 <lcd_write+0xa8>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60cb      	str	r3, [r1, #12]
		ENABLE_DATA();
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <lcd_write+0xa8>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <lcd_write+0xa8>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	60d3      	str	r3, [r2, #12]
 8000ff2:	2032      	movs	r0, #50	; 0x32
 8000ff4:	f7ff f8f6 	bl	80001e4 <Halt_us>
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <lcd_write+0xa8>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4a16      	ldr	r2, [pc, #88]	; (8001058 <lcd_write+0xa8>)
 8000ffe:	f023 0302 	bic.w	r3, r3, #2
 8001002:	60d3      	str	r3, [r2, #12]

		GPIOB->ODR &= 0x0FFF;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <lcd_write+0xa8>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	4a13      	ldr	r2, [pc, #76]	; (8001058 <lcd_write+0xa8>)
 800100a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800100e:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= (((*s<<4) & 0xF0)<<8);
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <lcd_write+0xa8>)
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	031b      	lsls	r3, r3, #12
 800101a:	b29b      	uxth	r3, r3
 800101c:	490e      	ldr	r1, [pc, #56]	; (8001058 <lcd_write+0xa8>)
 800101e:	4313      	orrs	r3, r2
 8001020:	60cb      	str	r3, [r1, #12]
		ENABLE_DATA();
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <lcd_write+0xa8>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <lcd_write+0xa8>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	60d3      	str	r3, [r2, #12]
 800102e:	2032      	movs	r0, #50	; 0x32
 8001030:	f7ff f8d8 	bl	80001e4 <Halt_us>
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <lcd_write+0xa8>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <lcd_write+0xa8>)
 800103a:	f023 0302 	bic.w	r3, r3, #2
 800103e:	60d3      	str	r3, [r2, #12]
		++s;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
	while(*s != 0){
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1bb      	bne.n	8000fc6 <lcd_write+0x16>
	}
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40010c00 	.word	0x40010c00

0800105c <send_command_to_lcd>:

void send_command_to_lcd(uint8_t command)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	GPIOB->ODR &= ~(1<<RS);
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <send_command_to_lcd+0x9c>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <send_command_to_lcd+0x9c>)
 800106c:	f023 0304 	bic.w	r3, r3, #4
 8001070:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= 0x0FFF;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <send_command_to_lcd+0x9c>)
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <send_command_to_lcd+0x9c>)
 8001078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800107c:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= ((command & 0xF0)<<8);
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <send_command_to_lcd+0x9c>)
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800108a:	491b      	ldr	r1, [pc, #108]	; (80010f8 <send_command_to_lcd+0x9c>)
 800108c:	4313      	orrs	r3, r2
 800108e:	60cb      	str	r3, [r1, #12]
	ENABLE_DATA();
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <send_command_to_lcd+0x9c>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <send_command_to_lcd+0x9c>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	60d3      	str	r3, [r2, #12]
 800109c:	2032      	movs	r0, #50	; 0x32
 800109e:	f7ff f8a1 	bl	80001e4 <Halt_us>
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <send_command_to_lcd+0x9c>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <send_command_to_lcd+0x9c>)
 80010a8:	f023 0302 	bic.w	r3, r3, #2
 80010ac:	60d3      	str	r3, [r2, #12]

	GPIOB->ODR &= 0x0FFF;
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <send_command_to_lcd+0x9c>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <send_command_to_lcd+0x9c>)
 80010b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b8:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= (((command<<4) & 0xF0)<<8);
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <send_command_to_lcd+0x9c>)
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	031b      	lsls	r3, r3, #12
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <send_command_to_lcd+0x9c>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60cb      	str	r3, [r1, #12]
	ENABLE_DATA();
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <send_command_to_lcd+0x9c>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <send_command_to_lcd+0x9c>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	60d3      	str	r3, [r2, #12]
 80010d6:	2032      	movs	r0, #50	; 0x32
 80010d8:	f7ff f884 	bl	80001e4 <Halt_us>
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <send_command_to_lcd+0x9c>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <send_command_to_lcd+0x9c>)
 80010e2:	f023 0302 	bic.w	r3, r3, #2
 80010e6:	60d3      	str	r3, [r2, #12]

	Halt_ms(2);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f7ff f8cf 	bl	800028c <Halt_ms>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010c00 	.word	0x40010c00

080010fc <Blink1>:
#include "OS.h"

void Blink1(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	while(1){
		GPIOC->ODR ^= 1<<2;
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <Blink1+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4a03      	ldr	r2, [pc, #12]	; (8001114 <Blink1+0x18>)
 8001106:	f083 0304 	eor.w	r3, r3, #4
 800110a:	60d3      	str	r3, [r2, #12]
		Halt_ms(200);
 800110c:	20c8      	movs	r0, #200	; 0xc8
 800110e:	f7ff f8bd 	bl	800028c <Halt_ms>
		GPIOC->ODR ^= 1<<2;
 8001112:	e7f5      	b.n	8001100 <Blink1+0x4>
 8001114:	40011000 	.word	0x40011000

08001118 <Blink2>:
	}
}

void Blink2(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	while(1){

		GPIOC->ODR ^= 1<<3;
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <Blink2+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <Blink2+0x18>)
 8001122:	f083 0308 	eor.w	r3, r3, #8
 8001126:	60d3      	str	r3, [r2, #12]
		Halt_ms(50);
 8001128:	2032      	movs	r0, #50	; 0x32
 800112a:	f7ff f8af 	bl	800028c <Halt_ms>
		GPIOC->ODR ^= 1<<3;
 800112e:	e7f5      	b.n	800111c <Blink2+0x4>
 8001130:	40011000 	.word	0x40011000

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 fba6 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f81e 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 f8fe 	bl	8001340 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001144:	f000 f8d2 	bl	80012ec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001148:	f000 f85a 	bl	8001200 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800114c:	f000 f8a4 	bl	8001298 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001150:	f7ff febe 	bl	8000ed0 <lcd_init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  __disable_irq();
  Create_Thread(&Blink1);
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <main+0x3c>)
 800115a:	f7ff fc9f 	bl	8000a9c <Create_Thread>
  Create_Thread(&Blink2);
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <main+0x40>)
 8001160:	f7ff fc9c 	bl	8000a9c <Create_Thread>
  Create_Thread(&lcd_string);
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <main+0x44>)
 8001166:	f7ff fc99 	bl	8000a9c <Create_Thread>
  os_init();
 800116a:	f7ff fe7b 	bl	8000e64 <os_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116e:	e7fe      	b.n	800116e <main+0x3a>
 8001170:	080010fd 	.word	0x080010fd
 8001174:	08001119 	.word	0x08001119
 8001178:	08001471 	.word	0x08001471

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b090      	sub	sp, #64	; 0x40
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f002 fb60 	bl	8003850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a2:	2301      	movs	r3, #1
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a6:	2310      	movs	r3, #16
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0318 	add.w	r3, r7, #24
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fee3 	bl	8001f88 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011c8:	f000 f998 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2102      	movs	r1, #2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 f950 	bl	800248c <HAL_RCC_ClockConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80011f2:	f000 f983 	bl	80014fc <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3740      	adds	r7, #64	; 0x40
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_TIM2_Init+0x94>)
 800121e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001222:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_TIM2_Init+0x94>)
 8001226:	223f      	movs	r2, #63	; 0x3f
 8001228:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_TIM2_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_TIM2_Init+0x94>)
 8001232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001236:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_TIM2_Init+0x94>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_TIM2_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001244:	4813      	ldr	r0, [pc, #76]	; (8001294 <MX_TIM2_Init+0x94>)
 8001246:	f001 fae9 	bl	800281c <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001250:	f000 f954 	bl	80014fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_TIM2_Init+0x94>)
 8001262:	f001 fc85 	bl	8002b70 <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800126c:	f000 f946 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_TIM2_Init+0x94>)
 800127e:	f001 fe57 	bl	8002f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001288:	f000 f938 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000698 	.word	0x20000698

08001298 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_USART1_UART_Init+0x50>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012be:	2204      	movs	r2, #4
 80012c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_USART1_UART_Init+0x4c>)
 80012d0:	f001 fe9e 	bl	8003010 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012da:	f000 f90f 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200006e0 	.word	0x200006e0
 80012e8:	40013800 	.word	0x40013800

080012ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <MX_USART2_UART_Init+0x50>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001324:	f001 fe74 	bl	8003010 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132e:	f000 f8e5 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000724 	.word	0x20000724
 800133c:	40004400 	.word	0x40004400

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001354:	4b41      	ldr	r3, [pc, #260]	; (800145c <MX_GPIO_Init+0x11c>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a40      	ldr	r2, [pc, #256]	; (800145c <MX_GPIO_Init+0x11c>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b3e      	ldr	r3, [pc, #248]	; (800145c <MX_GPIO_Init+0x11c>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136c:	4b3b      	ldr	r3, [pc, #236]	; (800145c <MX_GPIO_Init+0x11c>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a3a      	ldr	r2, [pc, #232]	; (800145c <MX_GPIO_Init+0x11c>)
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b38      	ldr	r3, [pc, #224]	; (800145c <MX_GPIO_Init+0x11c>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b35      	ldr	r3, [pc, #212]	; (800145c <MX_GPIO_Init+0x11c>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a34      	ldr	r2, [pc, #208]	; (800145c <MX_GPIO_Init+0x11c>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <MX_GPIO_Init+0x11c>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b2f      	ldr	r3, [pc, #188]	; (800145c <MX_GPIO_Init+0x11c>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a2e      	ldr	r2, [pc, #184]	; (800145c <MX_GPIO_Init+0x11c>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <MX_GPIO_Init+0x11c>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Blink1_Pin_Pin|Blink2_Pin_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	210c      	movs	r1, #12
 80013b8:	4829      	ldr	r0, [pc, #164]	; (8001460 <MX_GPIO_Init+0x120>)
 80013ba:	f000 fdab 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2120      	movs	r1, #32
 80013c2:	4828      	ldr	r0, [pc, #160]	; (8001464 <MX_GPIO_Init+0x124>)
 80013c4:	f000 fda6 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable_Pin|RS_Pin|DATA4_Pin|DATA5_Pin
 80013c8:	2200      	movs	r2, #0
 80013ca:	f24f 0106 	movw	r1, #61446	; 0xf006
 80013ce:	4826      	ldr	r0, [pc, #152]	; (8001468 <MX_GPIO_Init+0x128>)
 80013d0:	f000 fda0 	bl	8001f14 <HAL_GPIO_WritePin>
                          |DATA6_Pin|DATA7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <MX_GPIO_Init+0x12c>)
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	481d      	ldr	r0, [pc, #116]	; (8001460 <MX_GPIO_Init+0x120>)
 80013ea:	f000 fc0f 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Blink1_Pin_Pin Blink2_Pin_Pin */
  GPIO_InitStruct.Pin = Blink1_Pin_Pin|Blink2_Pin_Pin;
 80013ee:	230c      	movs	r3, #12
 80013f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <MX_GPIO_Init+0x120>)
 8001406:	f000 fc01 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800140a:	2320      	movs	r3, #32
 800140c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2302      	movs	r3, #2
 8001418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4619      	mov	r1, r3
 8001420:	4810      	ldr	r0, [pc, #64]	; (8001464 <MX_GPIO_Init+0x124>)
 8001422:	f000 fbf3 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable_Pin RS_Pin DATA4_Pin DATA5_Pin
                           DATA6_Pin DATA7_Pin */
  GPIO_InitStruct.Pin = Enable_Pin|RS_Pin|DATA4_Pin|DATA5_Pin
 8001426:	f24f 0306 	movw	r3, #61446	; 0xf006
 800142a:	613b      	str	r3, [r7, #16]
                          |DATA6_Pin|DATA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2302      	movs	r3, #2
 8001436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	4619      	mov	r1, r3
 800143e:	480a      	ldr	r0, [pc, #40]	; (8001468 <MX_GPIO_Init+0x128>)
 8001440:	f000 fbe4 	bl	8001c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2028      	movs	r0, #40	; 0x28
 800144a:	f000 fb04 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800144e:	2028      	movs	r0, #40	; 0x28
 8001450:	f000 fb1d 	bl	8001a8e <HAL_NVIC_EnableIRQ>

}
 8001454:	bf00      	nop
 8001456:	3720      	adds	r7, #32
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	40011000 	.word	0x40011000
 8001464:	40010800 	.word	0x40010800
 8001468:	40010c00 	.word	0x40010c00
 800146c:	10110000 	.word	0x10110000

08001470 <lcd_string>:

/* USER CODE BEGIN 4 */
void lcd_string(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
	char str1[] = "Peti";
 8001476:	4a16      	ldr	r2, [pc, #88]	; (80014d0 <lcd_string+0x60>)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001480:	6018      	str	r0, [r3, #0]
 8001482:	3304      	adds	r3, #4
 8001484:	7019      	strb	r1, [r3, #0]
	char str2[] = "Dani";
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <lcd_string+0x64>)
 8001488:	463b      	mov	r3, r7
 800148a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800148e:	6018      	str	r0, [r3, #0]
 8001490:	3304      	adds	r3, #4
 8001492:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		lcd_write(str1);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fd89 	bl	8000fb0 <lcd_write>
		Halt_ms(1000);
 800149e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a2:	f7fe fef3 	bl	800028c <Halt_ms>
		send_command_to_lcd(0b00000001);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f7ff fdd8 	bl	800105c <send_command_to_lcd>
		Halt_ms(1);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7fe feed 	bl	800028c <Halt_ms>
		lcd_write(str2);
 80014b2:	463b      	mov	r3, r7
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fd7b 	bl	8000fb0 <lcd_write>
		Halt_ms(1000);
 80014ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014be:	f7fe fee5 	bl	800028c <Halt_ms>
		send_command_to_lcd(0b00000001);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff fdca 	bl	800105c <send_command_to_lcd>
		Halt_ms(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7fe fedf 	bl	800028c <Halt_ms>
		lcd_write(str1);
 80014ce:	e7e1      	b.n	8001494 <lcd_string+0x24>
 80014d0:	08003878 	.word	0x08003878
 80014d4:	08003880 	.word	0x08003880

080014d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d101      	bne.n	80014ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ea:	f000 f9e3 	bl	80018b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40012c00 	.word	0x40012c00

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	e7fe      	b.n	8001504 <Error_Handler+0x8>
	...

08001508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_MspInit+0x5c>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <HAL_MspInit+0x5c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6193      	str	r3, [r2, #24]
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_MspInit+0x5c>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_MspInit+0x5c>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_MspInit+0x5c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_MspInit+0x5c>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_MspInit+0x60>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_MspInit+0x60>)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000

0800156c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157c:	d113      	bne.n	80015a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_TIM_Base_MspInit+0x44>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_TIM_Base_MspInit+0x44>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_TIM_Base_MspInit+0x44>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	201c      	movs	r0, #28
 800159c:	f000 fa5b 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015a0:	201c      	movs	r0, #28
 80015a2:	f000 fa74 	bl	8001a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a35      	ldr	r2, [pc, #212]	; (80016a4 <HAL_UART_MspInit+0xf0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d13a      	bne.n	800164a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d4:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a33      	ldr	r2, [pc, #204]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 80015da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	4619      	mov	r1, r3
 8001618:	4824      	ldr	r0, [pc, #144]	; (80016ac <HAL_UART_MspInit+0xf8>)
 800161a:	f000 faf7 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800161e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	4619      	mov	r1, r3
 8001632:	481e      	ldr	r0, [pc, #120]	; (80016ac <HAL_UART_MspInit+0xf8>)
 8001634:	f000 faea 	bl	8001c0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	2025      	movs	r0, #37	; 0x25
 800163e:	f000 fa0a 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001642:	2025      	movs	r0, #37	; 0x25
 8001644:	f000 fa23 	bl	8001a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001648:	e028      	b.n	800169c <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <HAL_UART_MspInit+0xfc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d123      	bne.n	800169c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 800165a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165e:	61d3      	str	r3, [r2, #28]
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_UART_MspInit+0xf4>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001684:	230c      	movs	r3, #12
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2302      	movs	r3, #2
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	4619      	mov	r1, r3
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <HAL_UART_MspInit+0xf8>)
 8001698:	f000 fab8 	bl	8001c0c <HAL_GPIO_Init>
}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010800 	.word	0x40010800
 80016b0:	40004400 	.word	0x40004400

080016b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	2019      	movs	r0, #25
 80016ca:	f000 f9c4 	bl	8001a56 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80016ce:	2019      	movs	r0, #25
 80016d0:	f000 f9dd 	bl	8001a8e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <HAL_InitTick+0x9c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <HAL_InitTick+0x9c>)
 80016da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_InitTick+0x9c>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ec:	f107 0210 	add.w	r2, r7, #16
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 f842 	bl	8002780 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016fc:	f001 f82c 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8001700:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	4a13      	ldr	r2, [pc, #76]	; (8001754 <HAL_InitTick+0xa0>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	3b01      	subs	r3, #1
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_InitTick+0xa4>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <HAL_InitTick+0xa8>)
 8001714:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_InitTick+0xa4>)
 8001718:	f240 32e7 	movw	r2, #999	; 0x3e7
 800171c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_InitTick+0xa4>)
 8001720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001722:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_InitTick+0xa4>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_InitTick+0xa4>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001730:	4809      	ldr	r0, [pc, #36]	; (8001758 <HAL_InitTick+0xa4>)
 8001732:	f001 f873 	bl	800281c <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d104      	bne.n	8001746 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <HAL_InitTick+0xa4>)
 800173e:	f001 f8bd 	bl	80028bc <HAL_TIM_Base_Start_IT>
 8001742:	4603      	mov	r3, r0
 8001744:	e000      	b.n	8001748 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	3730      	adds	r7, #48	; 0x30
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	431bde83 	.word	0x431bde83
 8001758:	20000768 	.word	0x20000768
 800175c:	40012c00 	.word	0x40012c00

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler+0x4>

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
	...

080017a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN SysTick_IRQn 0 */

			/*Saving context to the stack*/
	__disable_irq();
	__asm("push {r4-r11}");
 80017ac:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm("LDR	R0, =current_thread_pt");
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <SysTick_Handler+0x3c>)
	__asm("LDR	R1, [R0]");
 80017b2:	6801      	ldr	r1, [r0, #0]
	__asm("STR	SP, [R1]");
 80017b4:	f8c1 d000 	str.w	sp, [r1]


	/*Scheduler function goes here*/

	current_thread_pt = current_thread_pt->next;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <SysTick_Handler+0x38>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4a07      	ldr	r2, [pc, #28]	; (80017dc <SysTick_Handler+0x38>)
 80017c0:	6013      	str	r3, [r2, #0]

	/*Loading context from the stack*/
	__asm("LDR	R0,=current_thread_pt");
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <SysTick_Handler+0x3c>)
	__asm("LDR	R1, [R0]");
 80017c4:	6801      	ldr	r1, [r0, #0]
	__asm("LDR	SP, [R1]");
 80017c6:	f8d1 d000 	ldr.w	sp, [r1]
	__asm("POP	{R4-R11}");
 80017ca:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  __ASM volatile ("cpsie i" : : : "memory");
 80017ce:	b662      	cpsie	i
}
 80017d0:	bf00      	nop
	__enable_irq();
	__asm("bx 	lr");
 80017d2:	4770      	bx	lr
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	2000002c 	.word	0x2000002c
 80017e0:	2000002c 	.word	0x2000002c

080017e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <TIM1_UP_IRQHandler+0x10>)
 80017ea:	f001 f8b9 	bl	8002960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000768 	.word	0x20000768

080017f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <TIM2_IRQHandler+0x10>)
 80017fe:	f001 f8af 	bl	8002960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000698 	.word	0x20000698

0800180c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <USART1_IRQHandler+0x10>)
 8001812:	f001 fc4b 	bl	80030ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200006e0 	.word	0x200006e0

08001820 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001824:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001828:	f000 fb8c 	bl	8001f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	; (8001874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	; (8001880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001862:	f7ff ffe5 	bl	8001830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001866:	f001 ffcf 	bl	8003808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800186a:	f7ff fc63 	bl	8001134 <main>
  bx lr
 800186e:	4770      	bx	lr
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001878:	080038b8 	.word	0x080038b8
  ldr r2, =_sbss
 800187c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001880:	200007b4 	.word	0x200007b4

08001884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC1_2_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_Init+0x28>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <HAL_Init+0x28>)
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001898:	2003      	movs	r0, #3
 800189a:	f000 f8d1 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189e:	200f      	movs	r0, #15
 80018a0:	f7ff ff08 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a4:	f7ff fe30 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000

080018b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x1c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_IncTick+0x20>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <HAL_IncTick+0x20>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000008 	.word	0x20000008
 80018d4:	200007b0 	.word	0x200007b0

080018d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <HAL_GetTick+0x10>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	200007b0 	.word	0x200007b0

080018ec <__NVIC_SetPriorityGrouping>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4906      	ldr	r1, [pc, #24]	; (8001984 <__NVIC_EnableIRQ+0x34>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff4f 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff64 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ffb2 	bl	80019dc <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff81 	bl	8001988 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff57 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d008      	beq.n	8001ad2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e020      	b.n	8001b14 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 020e 	bic.w	r2, r2, #14
 8001ae0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0201 	bic.w	r2, r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	2101      	movs	r1, #1
 8001afc:	fa01 f202 	lsl.w	r2, r1, r2
 8001b00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d005      	beq.n	8001b42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e051      	b.n	8001be6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 020e 	bic.w	r2, r2, #14
 8001b50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <HAL_DMA_Abort_IT+0xd0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d029      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xa0>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <HAL_DMA_Abort_IT+0xd4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d022      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x9c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <HAL_DMA_Abort_IT+0xd8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d01a      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x96>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_DMA_Abort_IT+0xdc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d012      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x90>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <HAL_DMA_Abort_IT+0xe0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00a      	beq.n	8001baa <HAL_DMA_Abort_IT+0x8a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <HAL_DMA_Abort_IT+0xe4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d102      	bne.n	8001ba4 <HAL_DMA_Abort_IT+0x84>
 8001b9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ba2:	e00e      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba8:	e00b      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bae:	e008      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb4:	e005      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bba:	e002      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	e000      	b.n	8001bc2 <HAL_DMA_Abort_IT+0xa2>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_DMA_Abort_IT+0xe8>)
 8001bc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
    } 
  }
  return status;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40020008 	.word	0x40020008
 8001bf4:	4002001c 	.word	0x4002001c
 8001bf8:	40020030 	.word	0x40020030
 8001bfc:	40020044 	.word	0x40020044
 8001c00:	40020058 	.word	0x40020058
 8001c04:	4002006c 	.word	0x4002006c
 8001c08:	40020000 	.word	0x40020000

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	e169      	b.n	8001ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c20:	2201      	movs	r2, #1
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 8158 	bne.w	8001eee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4a9a      	ldr	r2, [pc, #616]	; (8001eac <HAL_GPIO_Init+0x2a0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d05e      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c48:	4a98      	ldr	r2, [pc, #608]	; (8001eac <HAL_GPIO_Init+0x2a0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d875      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c4e:	4a98      	ldr	r2, [pc, #608]	; (8001eb0 <HAL_GPIO_Init+0x2a4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d058      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c54:	4a96      	ldr	r2, [pc, #600]	; (8001eb0 <HAL_GPIO_Init+0x2a4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d86f      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c5a:	4a96      	ldr	r2, [pc, #600]	; (8001eb4 <HAL_GPIO_Init+0x2a8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d052      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c60:	4a94      	ldr	r2, [pc, #592]	; (8001eb4 <HAL_GPIO_Init+0x2a8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d869      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c66:	4a94      	ldr	r2, [pc, #592]	; (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04c      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c6c:	4a92      	ldr	r2, [pc, #584]	; (8001eb8 <HAL_GPIO_Init+0x2ac>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d863      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c72:	4a92      	ldr	r2, [pc, #584]	; (8001ebc <HAL_GPIO_Init+0x2b0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d046      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
 8001c78:	4a90      	ldr	r2, [pc, #576]	; (8001ebc <HAL_GPIO_Init+0x2b0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d85d      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c7e:	2b12      	cmp	r3, #18
 8001c80:	d82a      	bhi.n	8001cd8 <HAL_GPIO_Init+0xcc>
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	d859      	bhi.n	8001d3a <HAL_GPIO_Init+0x12e>
 8001c86:	a201      	add	r2, pc, #4	; (adr r2, 8001c8c <HAL_GPIO_Init+0x80>)
 8001c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8c:	08001d07 	.word	0x08001d07
 8001c90:	08001ce1 	.word	0x08001ce1
 8001c94:	08001cf3 	.word	0x08001cf3
 8001c98:	08001d35 	.word	0x08001d35
 8001c9c:	08001d3b 	.word	0x08001d3b
 8001ca0:	08001d3b 	.word	0x08001d3b
 8001ca4:	08001d3b 	.word	0x08001d3b
 8001ca8:	08001d3b 	.word	0x08001d3b
 8001cac:	08001d3b 	.word	0x08001d3b
 8001cb0:	08001d3b 	.word	0x08001d3b
 8001cb4:	08001d3b 	.word	0x08001d3b
 8001cb8:	08001d3b 	.word	0x08001d3b
 8001cbc:	08001d3b 	.word	0x08001d3b
 8001cc0:	08001d3b 	.word	0x08001d3b
 8001cc4:	08001d3b 	.word	0x08001d3b
 8001cc8:	08001d3b 	.word	0x08001d3b
 8001ccc:	08001d3b 	.word	0x08001d3b
 8001cd0:	08001ce9 	.word	0x08001ce9
 8001cd4:	08001cfd 	.word	0x08001cfd
 8001cd8:	4a79      	ldr	r2, [pc, #484]	; (8001ec0 <HAL_GPIO_Init+0x2b4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cde:	e02c      	b.n	8001d3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e029      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	3304      	adds	r3, #4
 8001cee:	623b      	str	r3, [r7, #32]
          break;
 8001cf0:	e024      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	623b      	str	r3, [r7, #32]
          break;
 8001cfa:	e01f      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	330c      	adds	r3, #12
 8001d02:	623b      	str	r3, [r7, #32]
          break;
 8001d04:	e01a      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	623b      	str	r3, [r7, #32]
          break;
 8001d12:	e013      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	611a      	str	r2, [r3, #16]
          break;
 8001d26:	e009      	b.n	8001d3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	615a      	str	r2, [r3, #20]
          break;
 8001d32:	e003      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e000      	b.n	8001d3c <HAL_GPIO_Init+0x130>
          break;
 8001d3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d801      	bhi.n	8001d46 <HAL_GPIO_Init+0x13a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	e001      	b.n	8001d4a <HAL_GPIO_Init+0x13e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2bff      	cmp	r3, #255	; 0xff
 8001d50:	d802      	bhi.n	8001d58 <HAL_GPIO_Init+0x14c>
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	e002      	b.n	8001d5e <HAL_GPIO_Init+0x152>
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3b08      	subs	r3, #8
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	210f      	movs	r1, #15
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	6a39      	ldr	r1, [r7, #32]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80b1 	beq.w	8001eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d8c:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a4c      	ldr	r2, [pc, #304]	; (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <HAL_GPIO_Init+0x2b8>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001da4:	4a48      	ldr	r2, [pc, #288]	; (8001ec8 <HAL_GPIO_Init+0x2bc>)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d013      	beq.n	8001df8 <HAL_GPIO_Init+0x1ec>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	; (8001ed0 <HAL_GPIO_Init+0x2c4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00d      	beq.n	8001df4 <HAL_GPIO_Init+0x1e8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a3e      	ldr	r2, [pc, #248]	; (8001ed4 <HAL_GPIO_Init+0x2c8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d007      	beq.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a3d      	ldr	r2, [pc, #244]	; (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_GPIO_Init+0x1e0>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e006      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001dec:	2304      	movs	r3, #4
 8001dee:	e004      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	4093      	lsls	r3, r2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e0a:	492f      	ldr	r1, [pc, #188]	; (8001ec8 <HAL_GPIO_Init+0x2bc>)
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	492c      	ldr	r1, [pc, #176]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e32:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4928      	ldr	r1, [pc, #160]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4922      	ldr	r1, [pc, #136]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	491e      	ldr	r1, [pc, #120]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4918      	ldr	r1, [pc, #96]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	4914      	ldr	r1, [pc, #80]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d021      	beq.n	8001ee0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	490e      	ldr	r1, [pc, #56]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60cb      	str	r3, [r1, #12]
 8001ea8:	e021      	b.n	8001eee <HAL_GPIO_Init+0x2e2>
 8001eaa:	bf00      	nop
 8001eac:	10320000 	.word	0x10320000
 8001eb0:	10310000 	.word	0x10310000
 8001eb4:	10220000 	.word	0x10220000
 8001eb8:	10210000 	.word	0x10210000
 8001ebc:	10120000 	.word	0x10120000
 8001ec0:	10110000 	.word	0x10110000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40010800 	.word	0x40010800
 8001ed0:	40010c00 	.word	0x40010c00
 8001ed4:	40011000 	.word	0x40011000
 8001ed8:	40011400 	.word	0x40011400
 8001edc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	4909      	ldr	r1, [pc, #36]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f47f ae8e 	bne.w	8001c20 <HAL_GPIO_Init+0x14>
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	372c      	adds	r7, #44	; 0x2c
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	611a      	str	r2, [r3, #16]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f806 	bl	8001f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40010400 	.word	0x40010400

08001f74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e272      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8087 	beq.w	80020b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa8:	4b92      	ldr	r3, [pc, #584]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d00c      	beq.n	8001fce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb4:	4b8f      	ldr	r3, [pc, #572]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d112      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x5e>
 8001fc0:	4b8c      	ldr	r3, [pc, #560]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fce:	4b89      	ldr	r3, [pc, #548]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d06c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x12c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d168      	bne.n	80020b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e24c      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x76>
 8001ff0:	4b80      	ldr	r3, [pc, #512]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a7f      	ldr	r2, [pc, #508]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e02e      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x98>
 8002006:	4b7b      	ldr	r3, [pc, #492]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a7a      	ldr	r2, [pc, #488]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b78      	ldr	r3, [pc, #480]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a77      	ldr	r2, [pc, #476]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e01d      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0xbc>
 800202a:	4b72      	ldr	r3, [pc, #456]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a71      	ldr	r2, [pc, #452]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b6f      	ldr	r3, [pc, #444]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6e      	ldr	r2, [pc, #440]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 8002044:	4b6b      	ldr	r3, [pc, #428]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a6a      	ldr	r2, [pc, #424]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a67      	ldr	r2, [pc, #412]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fc38 	bl	80018d8 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7ff fc34 	bl	80018d8 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e200      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b5d      	ldr	r3, [pc, #372]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0xe4>
 800208a:	e014      	b.n	80020b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fc24 	bl	80018d8 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff fc20 	bl	80018d8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e1ec      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x10c>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d063      	beq.n	800218a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c2:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d11c      	bne.n	8002114 <HAL_RCC_OscConfig+0x18c>
 80020da:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d116      	bne.n	8002114 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x176>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e1c0      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4939      	ldr	r1, [pc, #228]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	e03a      	b.n	800218a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211c:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff fbd9 	bl	80018d8 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212a:	f7ff fbd5 	bl	80018d8 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e1a1      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4927      	ldr	r1, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]
 800215c:	e015      	b.n	800218a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fbb8 	bl	80018d8 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216c:	f7ff fbb4 	bl	80018d8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e180      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d03a      	beq.n	800220c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d019      	beq.n	80021d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_RCC_OscConfig+0x274>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a4:	f7ff fb98 	bl	80018d8 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ac:	f7ff fb94 	bl	80018d8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e160      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f000 fb08 	bl	80027e0 <RCC_Delay>
 80021d0:	e01c      	b.n	800220c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_RCC_OscConfig+0x274>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7ff fb7e 	bl	80018d8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021de:	e00f      	b.n	8002200 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e0:	f7ff fb7a 	bl	80018d8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d908      	bls.n	8002200 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e146      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	42420000 	.word	0x42420000
 80021fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	4b92      	ldr	r3, [pc, #584]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e9      	bne.n	80021e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a6 	beq.w	8002366 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221e:	4b8b      	ldr	r3, [pc, #556]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10d      	bne.n	8002246 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	4b88      	ldr	r3, [pc, #544]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a87      	ldr	r2, [pc, #540]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	61d3      	str	r3, [r2, #28]
 8002236:	4b85      	ldr	r3, [pc, #532]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b82      	ldr	r3, [pc, #520]	; (8002450 <HAL_RCC_OscConfig+0x4c8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b7f      	ldr	r3, [pc, #508]	; (8002450 <HAL_RCC_OscConfig+0x4c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a7e      	ldr	r2, [pc, #504]	; (8002450 <HAL_RCC_OscConfig+0x4c8>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7ff fb3b 	bl	80018d8 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7ff fb37 	bl	80018d8 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e103      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b75      	ldr	r3, [pc, #468]	; (8002450 <HAL_RCC_OscConfig+0x4c8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x312>
 800228c:	4b6f      	ldr	r3, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4a6e      	ldr	r2, [pc, #440]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6213      	str	r3, [r2, #32]
 8002298:	e02d      	b.n	80022f6 <HAL_RCC_OscConfig+0x36e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x334>
 80022a2:	4b6a      	ldr	r3, [pc, #424]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a69      	ldr	r2, [pc, #420]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6213      	str	r3, [r2, #32]
 80022ae:	4b67      	ldr	r3, [pc, #412]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a66      	ldr	r2, [pc, #408]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	e01c      	b.n	80022f6 <HAL_RCC_OscConfig+0x36e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	d10c      	bne.n	80022de <HAL_RCC_OscConfig+0x356>
 80022c4:	4b61      	ldr	r3, [pc, #388]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a60      	ldr	r2, [pc, #384]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	f043 0304 	orr.w	r3, r3, #4
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	4b5e      	ldr	r3, [pc, #376]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a5d      	ldr	r2, [pc, #372]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	e00b      	b.n	80022f6 <HAL_RCC_OscConfig+0x36e>
 80022de:	4b5b      	ldr	r3, [pc, #364]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a5a      	ldr	r2, [pc, #360]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a57      	ldr	r2, [pc, #348]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d015      	beq.n	800232a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7ff faeb 	bl	80018d8 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7ff fae7 	bl	80018d8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0b1      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	4b4b      	ldr	r3, [pc, #300]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ee      	beq.n	8002306 <HAL_RCC_OscConfig+0x37e>
 8002328:	e014      	b.n	8002354 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7ff fad5 	bl	80018d8 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002330:	e00a      	b.n	8002348 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7ff fad1 	bl	80018d8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e09b      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002348:	4b40      	ldr	r3, [pc, #256]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1ee      	bne.n	8002332 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235a:	4b3c      	ldr	r3, [pc, #240]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a3b      	ldr	r2, [pc, #236]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002364:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8087 	beq.w	800247e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002370:	4b36      	ldr	r3, [pc, #216]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d061      	beq.n	8002440 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d146      	bne.n	8002412 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <HAL_RCC_OscConfig+0x4cc>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7ff faa5 	bl	80018d8 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7ff faa1 	bl	80018d8 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e06d      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a4:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b8:	d108      	bne.n	80023cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4921      	ldr	r1, [pc, #132]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a19      	ldr	r1, [r3, #32]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	430b      	orrs	r3, r1
 80023de:	491b      	ldr	r1, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_RCC_OscConfig+0x4cc>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7ff fa75 	bl	80018d8 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7ff fa71 	bl	80018d8 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e03d      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x46a>
 8002410:	e035      	b.n	800247e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_RCC_OscConfig+0x4cc>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff fa5e 	bl	80018d8 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7ff fa5a 	bl	80018d8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e026      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_RCC_OscConfig+0x4c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x498>
 800243e:	e01e      	b.n	800247e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d107      	bne.n	8002458 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e019      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
 800244c:	40021000 	.word	0x40021000
 8002450:	40007000 	.word	0x40007000
 8002454:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_OscConfig+0x500>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	429a      	cmp	r2, r3
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0d0      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b6a      	ldr	r3, [pc, #424]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d910      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b67      	ldr	r3, [pc, #412]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	4965      	ldr	r1, [pc, #404]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0b8      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a58      	ldr	r2, [pc, #352]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002500:	4b53      	ldr	r3, [pc, #332]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800250a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b50      	ldr	r3, [pc, #320]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	494d      	ldr	r1, [pc, #308]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d040      	beq.n	80025ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d115      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e07f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e073      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e06b      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256a:	4b39      	ldr	r3, [pc, #228]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4936      	ldr	r1, [pc, #216]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800257c:	f7ff f9ac 	bl	80018d8 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	e00a      	b.n	800259a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7ff f9a8 	bl	80018d8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e053      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 020c 	and.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1eb      	bne.n	8002584 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d210      	bcs.n	80025dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 0207 	bic.w	r2, r3, #7
 80025c2:	4922      	ldr	r1, [pc, #136]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e032      	b.n	8002642 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4916      	ldr	r1, [pc, #88]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	490e      	ldr	r1, [pc, #56]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800261a:	f000 f821 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 800261e:	4602      	mov	r2, r0
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	490a      	ldr	r1, [pc, #40]	; (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	5ccb      	ldrb	r3, [r1, r3]
 800262e:	fa22 f303 	lsr.w	r3, r2, r3
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x1cc>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_ClockConfig+0x1d0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f83a 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40022000 	.word	0x40022000
 8002650:	40021000 	.word	0x40021000
 8002654:	08003898 	.word	0x08003898
 8002658:	20000000 	.word	0x20000000
 800265c:	20000004 	.word	0x20000004

08002660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	b490      	push	{r4, r7}
 8002662:	b08a      	sub	sp, #40	; 0x28
 8002664:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002666:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_RCC_GetSysClockFreq+0xac>)
 8002668:	1d3c      	adds	r4, r7, #4
 800266a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800266c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002670:	f240 2301 	movw	r3, #513	; 0x201
 8002674:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800268a:	4b21      	ldr	r3, [pc, #132]	; (8002710 <HAL_RCC_GetSysClockFreq+0xb0>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b04      	cmp	r3, #4
 8002698:	d002      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x40>
 800269a:	2b08      	cmp	r3, #8
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0x46>
 800269e:	e02b      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026a2:	623b      	str	r3, [r7, #32]
      break;
 80026a4:	e02b      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	0c9b      	lsrs	r3, r3, #18
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3328      	adds	r3, #40	; 0x28
 80026b0:	443b      	add	r3, r7
 80026b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d012      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0c5b      	lsrs	r3, r3, #17
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	3328      	adds	r3, #40	; 0x28
 80026ce:	443b      	add	r3, r7
 80026d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026da:	fb03 f202 	mul.w	r2, r3, r2
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
 80026e6:	e004      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	623b      	str	r3, [r7, #32]
      break;
 80026f6:	e002      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026fa:	623b      	str	r3, [r7, #32]
      break;
 80026fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3728      	adds	r7, #40	; 0x28
 8002704:	46bd      	mov	sp, r7
 8002706:	bc90      	pop	{r4, r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	08003888 	.word	0x08003888
 8002710:	40021000 	.word	0x40021000
 8002714:	007a1200 	.word	0x007a1200
 8002718:	003d0900 	.word	0x003d0900

0800271c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002720:	4b02      	ldr	r3, [pc, #8]	; (800272c <HAL_RCC_GetHCLKFreq+0x10>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff2 	bl	800271c <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000
 8002754:	080038a8 	.word	0x080038a8

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffde 	bl	800271c <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0adb      	lsrs	r3, r3, #11
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	080038a8 	.word	0x080038a8

08002780 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	220f      	movs	r2, #15
 800278e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_RCC_GetClockConfig+0x58>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_RCC_GetClockConfig+0x58>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_GetClockConfig+0x58>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_RCC_GetClockConfig+0x58>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0207 	and.w	r2, r3, #7
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40022000 	.word	0x40022000

080027e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <RCC_Delay+0x34>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <RCC_Delay+0x38>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0a5b      	lsrs	r3, r3, #9
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027fc:	bf00      	nop
  }
  while (Delay --);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	60fa      	str	r2, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f9      	bne.n	80027fc <RCC_Delay+0x1c>
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	20000000 	.word	0x20000000
 8002818:	10624dd3 	.word	0x10624dd3

0800281c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e041      	b.n	80028b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fe92 	bl	800156c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f000 fa70 	bl	8002d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d001      	beq.n	80028d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e03a      	b.n	800294a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_TIM_Base_Start_IT+0x98>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00e      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x58>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fe:	d009      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x58>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <HAL_TIM_Base_Start_IT+0x9c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x58>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <HAL_TIM_Base_Start_IT+0xa0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d111      	bne.n	8002938 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b06      	cmp	r3, #6
 8002924:	d010      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002936:	e007      	b.n	8002948 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40000400 	.word	0x40000400
 800295c:	40000800 	.word	0x40000800

08002960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d122      	bne.n	80029bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d11b      	bne.n	80029bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0202 	mvn.w	r2, #2
 800298c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f9b1 	bl	8002d0a <HAL_TIM_IC_CaptureCallback>
 80029a8:	e005      	b.n	80029b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f9a4 	bl	8002cf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f9b3 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0204 	mvn.w	r2, #4
 80029e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f987 	bl	8002d0a <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f97a 	bl	8002cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f989 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0208 	mvn.w	r2, #8
 8002a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2204      	movs	r2, #4
 8002a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f95d 	bl	8002d0a <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f950 	bl	8002cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f95f 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0210 	mvn.w	r2, #16
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f933 	bl	8002d0a <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f926 	bl	8002cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f935 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d107      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0201 	mvn.w	r2, #1
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe fcfa 	bl	80014d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	2b80      	cmp	r3, #128	; 0x80
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afc:	2b80      	cmp	r3, #128	; 0x80
 8002afe:	d107      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa77 	bl	8002ffe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d10e      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d107      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f8f9 	bl	8002d2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d10e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d107      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0220 	mvn.w	r2, #32
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fa42 	bl	8002fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_TIM_ConfigClockSource+0x18>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e0b3      	b.n	8002cf0 <HAL_TIM_ConfigClockSource+0x180>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc0:	d03e      	beq.n	8002c40 <HAL_TIM_ConfigClockSource+0xd0>
 8002bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc6:	f200 8087 	bhi.w	8002cd8 <HAL_TIM_ConfigClockSource+0x168>
 8002bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bce:	f000 8085 	beq.w	8002cdc <HAL_TIM_ConfigClockSource+0x16c>
 8002bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd6:	d87f      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x168>
 8002bd8:	2b70      	cmp	r3, #112	; 0x70
 8002bda:	d01a      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0xa2>
 8002bdc:	2b70      	cmp	r3, #112	; 0x70
 8002bde:	d87b      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x168>
 8002be0:	2b60      	cmp	r3, #96	; 0x60
 8002be2:	d050      	beq.n	8002c86 <HAL_TIM_ConfigClockSource+0x116>
 8002be4:	2b60      	cmp	r3, #96	; 0x60
 8002be6:	d877      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x168>
 8002be8:	2b50      	cmp	r3, #80	; 0x50
 8002bea:	d03c      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0xf6>
 8002bec:	2b50      	cmp	r3, #80	; 0x50
 8002bee:	d873      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x168>
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d058      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0x136>
 8002bf4:	2b40      	cmp	r3, #64	; 0x40
 8002bf6:	d86f      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x168>
 8002bf8:	2b30      	cmp	r3, #48	; 0x30
 8002bfa:	d064      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x156>
 8002bfc:	2b30      	cmp	r3, #48	; 0x30
 8002bfe:	d86b      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x168>
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d060      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x156>
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d867      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x168>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d05c      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x156>
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d05a      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c10:	e062      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6899      	ldr	r1, [r3, #8]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f000 f966 	bl	8002ef2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	609a      	str	r2, [r3, #8]
      break;
 8002c3e:	e04e      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f000 f94f 	bl	8002ef2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c62:	609a      	str	r2, [r3, #8]
      break;
 8002c64:	e03b      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6859      	ldr	r1, [r3, #4]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	461a      	mov	r2, r3
 8002c74:	f000 f8c6 	bl	8002e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2150      	movs	r1, #80	; 0x50
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f91d 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002c84:	e02b      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f000 f8e4 	bl	8002e60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2160      	movs	r1, #96	; 0x60
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f90d 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002ca4:	e01b      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f000 f8a6 	bl	8002e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2140      	movs	r1, #64	; 0x40
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f8fd 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002cc4:	e00b      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f000 f8f4 	bl	8002ebe <TIM_ITRx_SetConfig>
        break;
 8002cd6:	e002      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cdc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a29      	ldr	r2, [pc, #164]	; (8002df8 <TIM_Base_SetConfig+0xb8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00b      	beq.n	8002d70 <TIM_Base_SetConfig+0x30>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d007      	beq.n	8002d70 <TIM_Base_SetConfig+0x30>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <TIM_Base_SetConfig+0xbc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_Base_SetConfig+0x30>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <TIM_Base_SetConfig+0xc0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d108      	bne.n	8002d82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <TIM_Base_SetConfig+0xb8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00b      	beq.n	8002da2 <TIM_Base_SetConfig+0x62>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d007      	beq.n	8002da2 <TIM_Base_SetConfig+0x62>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <TIM_Base_SetConfig+0xbc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d003      	beq.n	8002da2 <TIM_Base_SetConfig+0x62>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <TIM_Base_SetConfig+0xc0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d108      	bne.n	8002db4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a07      	ldr	r2, [pc, #28]	; (8002df8 <TIM_Base_SetConfig+0xb8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d103      	bne.n	8002de8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	615a      	str	r2, [r3, #20]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800

08002e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f023 030a 	bic.w	r3, r3, #10
 8002e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f023 0210 	bic.w	r2, r3, #16
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	031b      	lsls	r3, r3, #12
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	621a      	str	r2, [r3, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f043 0307 	orr.w	r3, r3, #7
 8002ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	609a      	str	r2, [r3, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b087      	sub	sp, #28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	609a      	str	r2, [r3, #8]
}
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e046      	b.n	8002fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00e      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d009      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800

08002fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e03f      	b.n	80030a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe fabc 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	; 0x24
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fb49 	bl	80036ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10d      	bne.n	80030fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_UART_IRQHandler+0x52>
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa4f 	bl	800359a <UART_Receive_IT>
      return;
 80030fc:	e17b      	b.n	80033f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80b1 	beq.w	8003268 <HAL_UART_IRQHandler+0x1bc>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <HAL_UART_IRQHandler+0x70>
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80a6 	beq.w	8003268 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_UART_IRQHandler+0x90>
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_UART_IRQHandler+0xb0>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0202 	orr.w	r2, r3, #2
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_UART_IRQHandler+0xd0>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f043 0204 	orr.w	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00f      	beq.n	80031a6 <HAL_UART_IRQHandler+0xfa>
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <HAL_UART_IRQHandler+0xee>
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0208 	orr.w	r2, r3, #8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 811e 	beq.w	80033ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_UART_IRQHandler+0x11e>
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f9e8 	bl	800359a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_UART_IRQHandler+0x146>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d031      	beq.n	8003256 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f92a 	bl	800344c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d023      	beq.n	800324e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003214:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	2b00      	cmp	r3, #0
 800321c:	d013      	beq.n	8003246 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	4a76      	ldr	r2, [pc, #472]	; (80033fc <HAL_UART_IRQHandler+0x350>)
 8003224:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fc78 	bl	8001b20 <HAL_DMA_Abort_IT>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003240:	4610      	mov	r0, r2
 8003242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	e00e      	b.n	8003264 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8ec 	bl	8003424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	e00a      	b.n	8003264 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f8e8 	bl	8003424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e006      	b.n	8003264 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8e4 	bl	8003424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003262:	e0c3      	b.n	80033ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	bf00      	nop
    return;
 8003266:	e0c1      	b.n	80033ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 80a1 	bne.w	80033b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 809b 	beq.w	80033b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8095 	beq.w	80033b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d04e      	beq.n	800334c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80032b8:	8a3b      	ldrh	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8098 	beq.w	80033f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032c4:	8a3a      	ldrh	r2, [r7, #16]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	f080 8092 	bcs.w	80033f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8a3a      	ldrh	r2, [r7, #16]
 80032d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d02b      	beq.n	8003334 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0210 	bic.w	r2, r2, #16
 8003328:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fbbb 	bl	8001aaa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333c:	b29b      	uxth	r3, r3
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	b29b      	uxth	r3, r3
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f876 	bl	8003436 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800334a:	e051      	b.n	80033f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003354:	b29b      	uxth	r3, r3
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d047      	beq.n	80033f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003364:	8a7b      	ldrh	r3, [r7, #18]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d044      	beq.n	80033f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003378:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0210 	bic.w	r2, r2, #16
 80033a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033a8:	8a7b      	ldrh	r3, [r7, #18]
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f842 	bl	8003436 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033b2:	e01f      	b.n	80033f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_UART_IRQHandler+0x324>
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f87f 	bl	80034cc <UART_Transmit_IT>
    return;
 80033ce:	e012      	b.n	80033f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00d      	beq.n	80033f6 <HAL_UART_IRQHandler+0x34a>
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f8c0 	bl	800356a <UART_EndTransmit_IT>
    return;
 80033ea:	e004      	b.n	80033f6 <HAL_UART_IRQHandler+0x34a>
    return;
 80033ec:	bf00      	nop
 80033ee:	e002      	b.n	80033f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80033f0:	bf00      	nop
 80033f2:	e000      	b.n	80033f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80033f4:	bf00      	nop
  }
}
 80033f6:	3728      	adds	r7, #40	; 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	080034a5 	.word	0x080034a5

08003400 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003462:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0210 	bic.w	r2, r2, #16
 800348a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff ffb0 	bl	8003424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b21      	cmp	r3, #33	; 0x21
 80034de:	d13e      	bne.n	800355e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e8:	d114      	bne.n	8003514 <UART_Transmit_IT+0x48>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d110      	bne.n	8003514 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003506:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	621a      	str	r2, [r3, #32]
 8003512:	e008      	b.n	8003526 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	1c59      	adds	r1, r3, #1
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6211      	str	r1, [r2, #32]
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29b      	uxth	r3, r3
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4619      	mov	r1, r3
 8003534:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003548:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003558:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
  }
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003580:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff38 	bl	8003400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b22      	cmp	r3, #34	; 0x22
 80035ac:	f040 8099 	bne.w	80036e2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	d117      	bne.n	80035ea <UART_Receive_IT+0x50>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d113      	bne.n	80035ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d8:	b29a      	uxth	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	1c9a      	adds	r2, r3, #2
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
 80035e8:	e026      	b.n	8003638 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fc:	d007      	beq.n	800360e <UART_Receive_IT+0x74>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <UART_Receive_IT+0x82>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e008      	b.n	800362e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003628:	b2da      	uxtb	r2, r3
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29b      	uxth	r3, r3
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4619      	mov	r1, r3
 8003646:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003648:	2b00      	cmp	r3, #0
 800364a:	d148      	bne.n	80036de <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0220 	bic.w	r2, r2, #32
 800365a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800366a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	2b01      	cmp	r3, #1
 800368a:	d123      	bne.n	80036d4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0210 	bic.w	r2, r2, #16
 80036a0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d10a      	bne.n	80036c6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036ca:	4619      	mov	r1, r3
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff feb2 	bl	8003436 <HAL_UARTEx_RxEventCallback>
 80036d2:	e002      	b.n	80036da <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff fe9c 	bl	8003412 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e002      	b.n	80036e4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003726:	f023 030c 	bic.w	r3, r3, #12
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	430b      	orrs	r3, r1
 8003732:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2c      	ldr	r2, [pc, #176]	; (8003800 <UART_SetConfig+0x114>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d103      	bne.n	800375c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7ff f800 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	e002      	b.n	8003762 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7fe ffe8 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003760:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	009a      	lsls	r2, r3, #2
 800376c:	441a      	add	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	4a22      	ldr	r2, [pc, #136]	; (8003804 <UART_SetConfig+0x118>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	0119      	lsls	r1, r3, #4
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fbb2 f2f3 	udiv	r2, r2, r3
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <UART_SetConfig+0x118>)
 800379a:	fba3 0302 	umull	r0, r3, r3, r2
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2064      	movs	r0, #100	; 0x64
 80037a2:	fb00 f303 	mul.w	r3, r0, r3
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	3332      	adds	r3, #50	; 0x32
 80037ac:	4a15      	ldr	r2, [pc, #84]	; (8003804 <UART_SetConfig+0x118>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b8:	4419      	add	r1, r3
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009a      	lsls	r2, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <UART_SetConfig+0x118>)
 80037d2:	fba3 0302 	umull	r0, r3, r3, r2
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2064      	movs	r0, #100	; 0x64
 80037da:	fb00 f303 	mul.w	r3, r0, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	3332      	adds	r3, #50	; 0x32
 80037e4:	4a07      	ldr	r2, [pc, #28]	; (8003804 <UART_SetConfig+0x118>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	f003 020f 	and.w	r2, r3, #15
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	440a      	add	r2, r1
 80037f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40013800 	.word	0x40013800
 8003804:	51eb851f 	.word	0x51eb851f

08003808 <__libc_init_array>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	2600      	movs	r6, #0
 800380c:	4d0c      	ldr	r5, [pc, #48]	; (8003840 <__libc_init_array+0x38>)
 800380e:	4c0d      	ldr	r4, [pc, #52]	; (8003844 <__libc_init_array+0x3c>)
 8003810:	1b64      	subs	r4, r4, r5
 8003812:	10a4      	asrs	r4, r4, #2
 8003814:	42a6      	cmp	r6, r4
 8003816:	d109      	bne.n	800382c <__libc_init_array+0x24>
 8003818:	f000 f822 	bl	8003860 <_init>
 800381c:	2600      	movs	r6, #0
 800381e:	4d0a      	ldr	r5, [pc, #40]	; (8003848 <__libc_init_array+0x40>)
 8003820:	4c0a      	ldr	r4, [pc, #40]	; (800384c <__libc_init_array+0x44>)
 8003822:	1b64      	subs	r4, r4, r5
 8003824:	10a4      	asrs	r4, r4, #2
 8003826:	42a6      	cmp	r6, r4
 8003828:	d105      	bne.n	8003836 <__libc_init_array+0x2e>
 800382a:	bd70      	pop	{r4, r5, r6, pc}
 800382c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003830:	4798      	blx	r3
 8003832:	3601      	adds	r6, #1
 8003834:	e7ee      	b.n	8003814 <__libc_init_array+0xc>
 8003836:	f855 3b04 	ldr.w	r3, [r5], #4
 800383a:	4798      	blx	r3
 800383c:	3601      	adds	r6, #1
 800383e:	e7f2      	b.n	8003826 <__libc_init_array+0x1e>
 8003840:	080038b0 	.word	0x080038b0
 8003844:	080038b0 	.word	0x080038b0
 8003848:	080038b0 	.word	0x080038b0
 800384c:	080038b4 	.word	0x080038b4

08003850 <memset>:
 8003850:	4603      	mov	r3, r0
 8003852:	4402      	add	r2, r0
 8003854:	4293      	cmp	r3, r2
 8003856:	d100      	bne.n	800385a <memset+0xa>
 8003858:	4770      	bx	lr
 800385a:	f803 1b01 	strb.w	r1, [r3], #1
 800385e:	e7f9      	b.n	8003854 <memset+0x4>

08003860 <_init>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	bf00      	nop
 8003864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003866:	bc08      	pop	{r3}
 8003868:	469e      	mov	lr, r3
 800386a:	4770      	bx	lr

0800386c <_fini>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	bf00      	nop
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr
